/*
 * cmd_lat_actv_zone_tracker.bt
 * 1. Script works at nvme driver level.
 * 2. Tracks latency for all Write cmds.
 * 3. Tracks latency for all ZMS cmds (Finish, Open & Reset(on active zone) only).
 * 4. Tracks Active Zones. Lists every action that results in change to
 *    no. of Active Zones (IO, EO, IF, EF, RE).
 * 5. If latency for particular write cmd exceeds set threshold, flags it, stops
 *    tracking further cmds and prints latency of all outstanding cmds.
 * 6. Identifies ongoing Reset and Finish cmds when write latency spike occurs.
 * 7. On ending the program(^C), the list of Active Zones is printed.
 *
 * Usage Notes:
 * 1: REVIEW and CHANGE below macros for your SSD. Currently defined for ZN540.
 * 2. Latency threshold macros - REVIEW and CHANGE values as per usecase.
 * 3. Default latenct tracker set to report 192K writes if completion time >20msec.
 *    Also, script is halted if completion time > 100msec. User can tune these values as needed.
 */


#include <linux/nvme.h>
#include <linux/blkdev.h>
#include <linux/blk-mq.h>

/*******!!!!! REVIEW AND MODIFY BEFORE RUNNING THE SCRIPT !!!!!*******/

/* Current definitions are for ZN540 (defined in 512b sector size unit) */
#define SSD_ZONE_SIZE		0x400000
#define SSD_ZONE_CAPACITY	0x21A800
/* Current value for 196K write */
#define FLAG_WRITE_DATALEN			376
/* Flag writes above this time - unit is usec - 20000 is 20ms */
#define FLAG_WRITE_CMD_TIME			20000
/* Halt script if write completion take more than this time - unit is usec - 100000 is 100ms */
#define FLAG_WRITE_CMD_TIME_HALT	100000


/* No need to modify these */
#define SSD_ZONE_SIZE_MASK ((0xFFFFFFFF - SSD_ZONE_SIZE)+1)
#define SSD_ZONE_SZ_CAP_DIFF (uint64)(SSD_ZONE_SIZE - SSD_ZONE_CAPACITY)

#define SSD_512B_SHIFT 9


BEGIN {

	/* Switch to toggle printing pending cmd info - default init to 1 to stop prints
	 * If the script halt timeout is hit, stop_print is toggled to print the pending cmds
	 */
	@stop_print = 1;

	// Counter for Active Zones
	@num_active_z = 0;
}


k:nvme_setup_cmd {

    // Works on latest bpftrace(v0.14.0-22-g4e66)	
    $cmdptr = (struct nvme_command *)*(arg1+sizeof(struct request));
    
    //REQ_OP_MASK hardcoded to 0xFF as latest bpftrace(v0.14.0-22-g4e66) was throwing macro recursion limit error. But v0.11.3 works with REQ_OP_MASK
    $action = (((struct request *)arg1)->cmd_flags & 0xFF);
   
	// Track only Write and ZMS Finish/Reset/Open -ignore all other cmds 
	if ( $action == REQ_OP_WRITE || (($action >= REQ_OP_ZONE_OPEN) && ($action <= REQ_OP_ZONE_RESET_ALL))) {
		// Get CmdId
		$cmdid = ((struct request *)arg1)->tag;
		// Get QNum
		$qnum = (uint16)(((struct request *)arg1)->mq_hctx->queue_num + 1);

		if (@stop_print != 1) {
			return;
		}
		if ($action == REQ_OP_WRITE) {
			// Store the write cmd start time stamp
			@wrt_lat_map[$qnum, $cmdid] = nsecs;
			return;
		}

		// Print the start markers for ZMS Finish - used to identify if a Finish was
		// ongoing when the write latency spike occured.

		if ($action == REQ_OP_ZONE_FINISH) {
			printf("F");
		}

		// Store the ZMS cmd start time stamp
		@zms_lat_map[$qnum, $cmdid] = nsecs;
	}
}


k:nvme_complete_rq
{

    // Works on latest bpftrace(v0.14.0-22-g4e66)	
    $cmdptr = (struct nvme_command *)*(arg0+sizeof(struct request));

	$op_code = $cmdptr->common.opcode;

	if (($op_code != nvme_cmd_write) && ($op_code != nvme_cmd_zone_mgmt_send)) {
        return;
    }

    $cmdid = ((struct request *)arg0)->tag;
    $qnum = (uint16)(((struct request *)arg0)->mq_hctx->queue_num + 1);

	// Convert __data_len to 512B ss to match with __sector
	// At nvme driver level, __sector is 512 byte based and __data_len is byte based.
	$datlen = (((struct request *)arg0)->__data_len >> SSD_512B_SHIFT);
	$secnum = ((struct request *)arg0)->__sector;

	// Get the zone start lba
	$zone = ($secnum & SSD_ZONE_SIZE_MASK);


	if ($op_code == nvme_cmd_write) {
    	$start = @wrt_lat_map[$qnum, $cmdid];
		delete(@wrt_lat_map[$qnum, $cmdid]);
		$cmdtime = $start ? (nsecs - $start)/1000 : 0;

		if ($cmdtime == 0) {
			// If the cmd start time was not tracked, ignore this cmd
			return;
		}

		if ($secnum == $zone) {
			// Implicit Open case
			@active_map[$zone] = 1;
			@num_active_z++;
			printf("IO %u %lx\n", @num_active_z, $zone);

			// 0x1e5800 = ZSZE - ZCAP
		} else if ( !(($secnum + $datlen + SSD_ZONE_SZ_CAP_DIFF) % SSD_ZONE_SIZE ) ) {
			// Implicit Finish case
			if (@active_map[$zone] == 1) {
				delete(@active_map[$zone]);
				@num_active_z--;
				printf("IF %u %lx\n", @num_active_z, $zone);
			}
		}
		// Enable to generate write cmd latency histogram 
    	// @usec_wrt_lat = hist($cmdtime);

		// Check 192K writes (unit 512B sect) - modify as per requirement
		if ($datlen == FLAG_WRITE_DATALEN) {
			// Flag write cmds if latency > FLAG_WRITE_CMD_TIME
			if (($cmdtime > FLAG_WRITE_CMD_TIME)) {
				printf("**%lx %u %s\n", $secnum, $cmdtime, strftime("%M:%S", nsecs));
				// If latency > FLAG_WRITE_CMD_TIME_HALT, start printing the latency of all pending wrie cmds
				// Note that once @stop_print is 0, no new cmds are tracked
				if ($cmdtime > FLAG_WRITE_CMD_TIME_HALT) {
					//exit();
					printf("HALTED\n");
					@stop_print  = 0;
				}
			}
		}

		/* If $cmdtime > FLAG_WRITE_CMD_TIME_HALT condition is hit, print write cmds latency for pending cmds.
		 * This is just additional debug info.
		 */
		if (@stop_print == 0) {
			printf("%lx %lx %u\n", $secnum, $datlen, $cmdtime);
		}
	}

	if ($op_code == nvme_cmd_zone_mgmt_send) {
    	$start = @zms_lat_map[$qnum, $cmdid];
		delete(@zms_lat_map[$qnum, $cmdid]);
		$cmdtime = $start ? (nsecs - $start)/1000 : 0;

		//  $cmdtime is 0 if start time was not logged for cmd. Skip the cmd.
		if ($cmdtime == 0) {
			return;
		}

		// Uncomment to generate ZMS latency histogram
		//@usec_zms_lat = hist($cmdtime);

		// Get the ZMS sub-op type
		$zsa = ((struct nvme_command *)$cmdptr)->zms.zsa;

		// Track only Finish, Open and Reset - ignore Close as it does not change Active Zone state
		if (($zsa >= NVME_ZONE_FINISH) && ($zsa <= NVME_ZONE_RESET)) {

			// Explicit Open case
			if ($zsa == NVME_ZONE_OPEN) {
				@active_map[$secnum] = 1;
				@num_active_z++;
				printf("EO %u %lx\n", @num_active_z, $secnum);

			} else {

				// Account for Explicit Finish & Reset cases only if zone is already Active
				if (@active_map[$secnum] == 1) {
					delete(@active_map[$secnum]);
					@num_active_z--;

					if ($zsa == NVME_ZONE_FINISH) {
						printf("EF %u %lx %u %s\n", @num_active_z, $secnum, $cmdtime, strftime("%M:%S", nsecs));
					} else {
						printf("RE %u %lx\n", @num_active_z, $secnum);
					}
				}
			} 
			//printf(":%u %u %lx %s\n", $zsa, $cmdtime, $secnum, strftime("%M:%S", nsecs));
		}
	}
}

END {
    clear(@stop_print);
}

