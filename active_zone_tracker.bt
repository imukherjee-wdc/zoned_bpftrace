/*
 * active_zone_tracker.bt - Script to track Active Zones at nvme driver level.
 * Lists every action that results in change to no. of Active Zones (IO, EO, IF, EF, RE)
 *
 * Usage Notes:
 * 1: Review and change below macros for your SSD. Currently defined for ZN540.
 * 2: At nvme driver level, __sector in 512 byte based and __data_len is byte based.
 *
 */

#include <linux/nvme.h>
#include <linux/blkdev.h>
#include <linux/blk-mq.h>

/*******!!!!! MODIFY BEFORE RUNNING THE SCRIPT !!!!!*******/
/* Define in terms of 512b ss units */
/* Current definitions are for ZN540 (512b sector size unit) */
#define SSD_ZONE_SIZE		0x400000
#define SSD_ZONE_CAPACITY	0x21A800


/* No need to modify these */
#define SSD_ZONE_SIZE_MASK ((0xFFFFFFFF - SSD_ZONE_SIZE)+1)
#define SSD_ZONE_SZ_CAP_DIFF (uint64)(SSD_ZONE_SIZE - SSD_ZONE_CAPACITY)

#define SSD_512B_SHIFT 9


BEGIN {

	@num_active_z = 0;
}

/* Trace every nvme cmd at nvme_complete_rq() level */
k:nvme_complete_rq
{

    // Works on latest bpftrace(v0.14.0-22-g4e66)	
    $cmdptr = (struct nvme_command *)*(arg0+sizeof(struct request));

	$op_code = $cmdptr->common.opcode;

	if (($op_code != nvme_cmd_write) && ($op_code != nvme_cmd_zone_mgmt_send)) {
        return;
    }

    $cmdid = ((struct request *)arg0)->tag;
    $qnum = (uint16)(((struct request *)arg0)->mq_hctx->queue_num + 1);

	$secnum = ((struct request *)arg0)->__sector;

	// Convert datalen to 512b ss, similar to $secnum
	$datlen = (((struct request *)arg0)->__data_len >> SSD_512B_SHIFT);

	// Get the zone start lba using the Zone Size mask
	$zone = ($secnum & SSD_ZONE_SIZE_MASK);


	if ($op_code == nvme_cmd_write) {

		if ($secnum == $zone) {
			// Implicit Open case
			@active_map[$zone] = 1;
			@num_active_z++;
			printf("%u IO %lx\n", @num_active_z, $zone);

		} else if ( !(($secnum + $datlen + SSD_ZONE_SZ_CAP_DIFF) % SSD_ZONE_SIZE ) ) {
			// Implicit Finish case
			if (@active_map[$zone] == 1) {
				delete(@active_map[$zone]);
				@num_active_z--;
				printf("%u IF %lx\n", @num_active_z, $zone);
			}
		}
	}

	if ($op_code == nvme_cmd_zone_mgmt_send) {

		$zsa = ((struct nvme_command *)$cmdptr)->zms.zsa;

		//For Active Zone tracking, ignore ZMS Close, focus only on Finish, Reset & Open
		if (($zsa >= NVME_ZONE_FINISH) && ($zsa <= NVME_ZONE_RESET)) {
			if ($zsa == NVME_ZONE_OPEN) {
				@active_map[$secnum] = 1;
				@num_active_z++;
				printf("%u EO %lx\n", @num_active_z, $secnum);
			} else {
				if (@active_map[$secnum] == 1) {
					delete(@active_map[$secnum]);
					@num_active_z--;

					if ($zsa == NVME_ZONE_FINISH) {
						printf("%u EF %lx\n", @num_active_z, $secnum);
					} else {
						printf("%u RE %lx\n", @num_active_z, $secnum);
					}
				}
			} 
		}
	}
}

