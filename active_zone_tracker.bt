/*
 * active_zone_tracker.bt - Script to track Active Zones at nvme driver level.
 * Lists every action that results in change to no. of Active Zones (IO, EO, IF, EF, RE)
 *
 * 1: At nvme driver level, __sector in 512 byte based and __data_len is byte based
 * 2: Has some hard codes that are applicable for ZN540. Review and change for other SSDs.
 *
 */

#include <linux/nvme.h>
#include <linux/blkdev.h>
#include <linux/blk-mq.h>


BEGIN {

	@num_active_z = 0;

}

/* Trace every nvme cmd at nvme_complete_rq() level */
k:nvme_complete_rq
{

    // Works on latest bpftrace(v0.14.0-22-g4e66)	
    $cmdptr = (struct nvme_command *)*(arg0+sizeof(struct request));

	$op_code = $cmdptr->common.opcode;

	if (($op_code != nvme_cmd_write) && ($op_code != nvme_cmd_zone_mgmt_send)) {
        return;
    }

    $cmdid = ((struct request *)arg0)->tag;
    $qnum = (uint16)(((struct request *)arg0)->mq_hctx->queue_num + 1);

	$secnum = ((struct request *)arg0)->__sector;

	// Convert datalen to 512b ss, similar to $secnum
	$datlen = (((struct request *)arg0)->__data_len >> 9);

	// Get the zone start lba using the Zone Size mask
	// ZSZE for ZN540 is 0x400000(512b ss)
	$zone = ($secnum & 0xffc00000);


	if ($op_code == nvme_cmd_write) {

		if ($secnum == $zone) {
			// Implicit Open case
			@active_map[$zone] = 1;
			@num_active_z++;
			printf("IO %u %lx\n", @num_active_z, $zone);

			//0x1e5800 is diff b/w ZSZE and ZCAP in 512b ss on BBZ
		} else if ( !(($secnum + $datlen + 0x1e5800) % 0x400000 ) ) {
			// Implicit Finish case
			if (@active_map[$zone] == 1) {
				delete(@active_map[$zone]);
				@num_active_z--;
				printf("IF %u %lx\n", @num_active_z, $zone);
			}
		}
	}

	if ($op_code == nvme_cmd_zone_mgmt_send) {

		$zsa = ((struct nvme_command *)$cmdptr)->zms.zsa;

		//For Active Zone tracking, ignore ZMS Close, focus only on Finish, Reset & Open
		if (($zsa >= 2) && ($zsa <= 4)) {
			if ($zsa == 3) {
				@active_map[$secnum] = 1;
				@num_active_z++;
				printf("EO %u %lx\n", @num_active_z, $secnum);
			} else {
				if (@active_map[$secnum] == 1) {
					delete(@active_map[$secnum]);
					@num_active_z--;

					if ($zsa == 2) {
						printf("EF %u %lx\n", @num_active_z, $secnum);
					} else {
						printf("RE %u %lx\n", @num_active_z, $secnum);
					}
				}
			} 
		}
	}
}

